name: Terraform

on:
  pull_request:
  issue_comment:
    types:
    - created

jobs:
  defaults:
    run:
      working-directory: ./environments/dev
  plan:
    name: Terraform Plan
    environment: dev
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      id-token: write
      contents: read
    steps:
      - name: Set repo short name
        run: echo "REPO_SHORT_NAME=${GITHUB_REPOSITORY#*\/}" >> $GITHUB_ENV

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.6

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE }}
          role-session-name: samplerolesession
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Terraform init
        id: init
        run: >
          terraform init
          -backend-config="region=${{ secrets.AWS_REGION }}"
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}"
          -backend-config="key=${REPO_SHORT_NAME}${ENVIRONMENT:+/}${ENVIRONMENT:-}"

      - name: Terraform validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform plan
        id: plan
        run: terraform plan -var="aws_region=$AWS_REGION" -no-color -out "tf_plan" -input=false
        continue-on-error: true

      - name: Comment on PR
        uses: actions/github-script@v6
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Check Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Zip Terraform config files
        run: zip -r config.zip . -x ".git*" "backend*"

      - name: Upload Terraform config and plan to S3
        run: aws s3 cp config.zip s3://${{ secrets.GH_ARTIFACTS_BUCKET }}/${{github.event.number}}/

  apply:
    name: Terraform Apply
    environment: dev
    if: ${{ github.event.issue.pull_request && github.event.comment.body == 'terraform apply' && github.actor == 'liamfit' }}
    runs-on: ubuntu-latest    
    permissions:
      pull-requests: write
      id-token: write
      contents: read
    steps:
      - name: Set repo short name
        run: echo "REPO_SHORT_NAME=${GITHUB_REPOSITORY#*\/}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.6

      - name: React to comment
        uses: actions/github-script@v4
        with:
          script: |
            const {owner, repo} = context.issue;
            github.reactions.createForIssueComment({
              owner,
              repo,
              comment_id: context.payload.comment.id,
              content: "rocket",
            });

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE }}
          role-session-name: samplerolesession
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download Terraform config and plan from S3
        run: aws s3 cp s3://${{ secrets.GH_ARTIFACTS_BUCKET }}/${{github.event.issue.number}}/config.zip .

      - name: Extract Terraform config and plan
        run: unzip config.zip

      - name: Terraform init
        id: init
        run: >
          terraform init
          -backend-config="region=${{ secrets.AWS_REGION }}"
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}"
          -backend-config="key=${REPO_SHORT_NAME}${ENVIRONMENT:+/}${ENVIRONMENT:-}"

      - name: Terraform apply
        id: apply
        run: terraform apply -auto-approve -no-color -input=false tf_plan
        continue-on-error: true

      - name: Comment on PR
        uses: actions/github-script@v6
        env:
          APPLY: "terraform\n${{ steps.apply.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Apply üé¨\`${{ steps.apply.outcome }}\`

            <details><summary>Show Result</summary>
            
            \`\`\`\n
            ${process.env.APPLY}
            \`\`\`

            </details>
            `;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Check Terraform apply status
        if: steps.apply.outcome == 'failure'
        run: exit 1

